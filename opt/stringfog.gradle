/**
 * 目前只能用在app module中，用在library里会编译失败：
 * e: java.lang.AssertionError: Error occurred while optimizing an expression:
 */
def isRelease = gradle.startParameter.taskNames.any { it.contains('Release') || it.contains('Localtest') }

if (!isRelease) {
    return
}

println "apply stringfog for: ${project.name}"
apply plugin: 'stringfog'
stringfog {
    // 必要：加解密库的实现类路径，需和上面配置的加解密算法库一致。
    implementation 'com.github.megatronking.stringfog.xor.StringFogImpl'
    // 可选：StringFog会自动尝试获取packageName，如果遇到获取失败的情况，可以显式地指定。
//    packageName 'com.github.megatronking.stringfog.app'
    // 可选：加密开关，默认开启。
    enable true
    // 可选：指定需加密的代码包路径，可配置多个，未指定将默认全部加密。
//    fogPackages = ['com.presence', 'com.aifantasy.human_chat', 'com.haven.prod']
    // 可选（3.0版本新增）：指定密钥生成器，默认使用长度8的随机密钥（每个字符串均有不同随机密钥）,
    // 也可以指定一个固定的密钥：HardCodeKeyGenerator("This is a key")
    kg rootProject.ext.stringfogRandomKeyGenerator
    // 可选（4.0版本新增）：用于控制字符串加密后在字节码中的存在形式, 默认为base64，
    // 也可以使用text或者bytes
    mode rootProject.ext.stringfogMode
}

dependencies {
    // 这里要和上面选用的加解密算法库一致，用于运行时解密。
    implementation 'com.github.megatronking.stringfog:xor:5.0.0'
}